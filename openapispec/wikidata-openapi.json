{
  "openapi": "3.0.3",
  "info": {
    "title": "Wikibase REST API",
    "version": "0.1",
    "description": "OpenAPI definition of Wikibase REST API",
    "contact": {
      "name": "Wikimedia Deutschland - Wikibase Product Platform Team",
      "url": "https://phabricator.wikimedia.org/project/board/5771/"
    },
    "license": {
      "name": "GNU General Public License v2.0 or later",
      "url": "https://spdx.org/licenses/GPL-2.0-or-later.html"
    }
  },
  "paths": {
    "/entities/items/{item_id}": {
      "get": {
        "operationId": "getItem",
        "tags": [
          "items"
        ],
        "summary": "Retrieve a single Wikibase Item by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/ItemFields"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Item"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "308": {
            "$ref": "#/components/responses/Moved"
          },
          "400": {
            "$ref": "#/components/responses/InvalidItemInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/properties/{property_id}": {
      "get": {
        "operationId": "getProperty",
        "tags": [
          "properties"
        ],
        "summary": "Retrieve a single Wikibase Property by ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/PropertyFields"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Property"
          },
          "400": {
            "$ref": "#/components/responses/InvalidPropertyInput"
          },
          "404": {
            "$ref": "#/components/responses/PropertyNotFound"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{item_id}/descriptions": {
      "get": {
        "operationId": "getItemDescriptions",
        "tags": [
          "descriptions"
        ],
        "summary": "Retrieve an Item's descriptions",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemDescriptions"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "308": {
            "$ref": "#/components/responses/Moved"
          },
          "400": {
            "$ref": "#/components/responses/InvalidItemIdInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "operationId": "patchItemDescriptions",
        "tags": [
          "descriptions"
        ],
        "summary": "[WIP] Change an Item's descriptions",
        "description": "This endpoint is currently in development and is not recommended for production use",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DescriptionsPatch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemDescriptions"
          },
          "400": {
            "$ref": "#/components/responses/InvalidItemPatchRequest"
          },
          "404": {
            "$ref": "#/components/responses/ItemNotFound"
          },
          "409": {
            "$ref": "#/components/responses/CannotApplyLabelsDescriptionsPatch"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "422": {
            "$ref": "#/components/responses/InvalidPatchedDescriptions"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/properties/{property_id}/descriptions": {
      "get": {
        "operationId": "getPropertyDescriptions",
        "tags": [
          "descriptions"
        ],
        "summary": "[WIP] Retrieve a Property's descriptions",
        "description": "This endpoint is currently in development and is not recommended for production use.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PropertyDescriptions"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/InvalidPropertyIdInput"
          },
          "404": {
            "$ref": "#/components/responses/PropertyNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{item_id}/descriptions/{language_code}": {
      "get": {
        "operationId": "getItemDescription",
        "tags": [
          "descriptions"
        ],
        "summary": "Retrieve an Item's description in a specific language",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/LanguageCode"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemDescription"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "308": {
            "$ref": "#/components/responses/Moved"
          },
          "400": {
            "$ref": "#/components/responses/InvalidItemTermByLanguageInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemDescriptionNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "operationId": "replaceItemDescription",
        "tags": [
          "descriptions"
        ],
        "summary": "Add / Replace an Item's description in a specific language",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/LanguageCode"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Description"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemDescription",
            "description": "The updated Description in a specific language"
          },
          "201": {
            "$ref": "#/components/responses/ItemDescription",
            "description": "The newly added Description in a specific language"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/InvalidSetItemDescriptionInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemNotFound"
          },
          "409": {
            "$ref": "#/components/responses/ItemRedirected"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{item_id}/statements": {
      "get": {
        "operationId": "getItemStatements",
        "tags": [
          "statements"
        ],
        "summary": "Retrieve Statements from an Item",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/PropertyFilter"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemStatements"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "308": {
            "$ref": "#/components/responses/Moved"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRetrieveItemStatementsInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "operationId": "addItemStatement",
        "tags": [
          "statements"
        ],
        "summary": "Add a new Statement to an Item",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Statement"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/ItemStatementCreated"
          },
          "400": {
            "$ref": "#/components/responses/InvalidNewItemStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemNotFound"
          },
          "409": {
            "$ref": "#/components/responses/ItemRedirected"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{item_id}/statements/{statement_id}": {
      "get": {
        "operationId": "getItemStatement",
        "tags": [
          "statements"
        ],
        "summary": "Retrieve a single Statement from an Item",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/ItemStatementId"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemStatement"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRetrieveItemStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemStatementNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "operationId": "replaceItemStatement",
        "tags": [
          "statements"
        ],
        "summary": "Replace a single Statement of an Item",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/ItemStatementId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Statement"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemStatement"
          },
          "400": {
            "$ref": "#/components/responses/InvalidReplaceItemStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemStatementNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "operationId": "patchItemStatement",
        "tags": [
          "statements"
        ],
        "summary": "Change elements of a single Statement of an Item",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/ItemStatementId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StatementPatch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemStatement"
          },
          "400": {
            "$ref": "#/components/responses/InvalidItemStatementPatch"
          },
          "404": {
            "$ref": "#/components/responses/ItemStatementNotFound"
          },
          "409": {
            "$ref": "#/components/responses/CannotApplyStatementPatch"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "422": {
            "$ref": "#/components/responses/InvalidPatchedStatement"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "operationId": "deleteItemStatement",
        "tags": [
          "statements"
        ],
        "summary": "Delete a single Statement from an Item",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/ItemStatementId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Edit"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResourceDeleted"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRemoveItemStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemStatementNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{item_id}/labels": {
      "get": {
        "operationId": "getItemLabels",
        "tags": [
          "labels"
        ],
        "summary": "Retrieve an Item's labels",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemLabels"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "308": {
            "$ref": "#/components/responses/Moved"
          },
          "400": {
            "$ref": "#/components/responses/InvalidItemIdInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "operationId": "patchItemLabels",
        "tags": [
          "labels"
        ],
        "summary": "Change an Item's Labels",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/LabelsPatch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemLabels"
          },
          "400": {
            "$ref": "#/components/responses/InvalidItemPatchRequest"
          },
          "404": {
            "$ref": "#/components/responses/ItemNotFound"
          },
          "409": {
            "$ref": "#/components/responses/CannotApplyLabelsDescriptionsPatch"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "422": {
            "$ref": "#/components/responses/InvalidPatchedLabels"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/properties/{property_id}/labels": {
      "get": {
        "operationId": "getPropertyLabels",
        "tags": [
          "labels"
        ],
        "summary": "Retrieve a Property's labels",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PropertyLabels"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/InvalidPropertyIdInput"
          },
          "404": {
            "$ref": "#/components/responses/PropertyNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{item_id}/labels/{language_code}": {
      "get": {
        "operationId": "getItemLabel",
        "tags": [
          "labels"
        ],
        "summary": "Retrieve an Item's label in a specific language",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/LanguageCode"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemLabel"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "308": {
            "$ref": "#/components/responses/Moved"
          },
          "400": {
            "$ref": "#/components/responses/InvalidItemTermByLanguageInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemLabelNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "operationId": "replaceItemLabel",
        "tags": [
          "labels"
        ],
        "summary": "Add / Replace an Item's label in a specific language",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/LanguageCode"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Label"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemLabel",
            "description": "The updated Label in a specific language"
          },
          "201": {
            "$ref": "#/components/responses/ItemLabel",
            "description": "The newly added Label in a specific language"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/InvalidSetItemLabelInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemNotFound"
          },
          "409": {
            "$ref": "#/components/responses/ItemRedirected"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/properties/{property_id}/labels/{language_code}": {
      "get": {
        "operationId": "getPropertyLabel",
        "tags": [
          "labels"
        ],
        "summary": "[WIP] Retrieve a Property's label in a specific language",
        "description": "This endpoint is currently in development and is not recommended for production use.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/LanguageCode"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PropertyLabel"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/InvalidPropertyTermByLanguageInput"
          },
          "404": {
            "$ref": "#/components/responses/PropertyLabelNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{item_id}/aliases": {
      "get": {
        "operationId": "getItemAliases",
        "tags": [
          "aliases"
        ],
        "summary": "Retrieve an Item's aliases",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemAliases"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "308": {
            "$ref": "#/components/responses/Moved"
          },
          "400": {
            "$ref": "#/components/responses/InvalidItemIdInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/properties/{property_id}/aliases": {
      "get": {
        "operationId": "getPropertyAliases",
        "tags": [
          "aliases"
        ],
        "summary": "[WIP] Retrieve a Property's aliases",
        "description": "This endpoint is currently in development and is not recommended for production use.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PropertyAliases"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/InvalidPropertyIdInput"
          },
          "404": {
            "$ref": "#/components/responses/PropertyNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/items/{item_id}/aliases/{language_code}": {
      "get": {
        "operationId": "getItemAliasesInLanguage",
        "tags": [
          "aliases"
        ],
        "summary": "Retrieve an Item's aliases in a specific language",
        "parameters": [
          {
            "$ref": "#/components/parameters/ItemId"
          },
          {
            "$ref": "#/components/parameters/LanguageCode"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemAliasesInLanguage"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "308": {
            "$ref": "#/components/responses/Moved"
          },
          "400": {
            "$ref": "#/components/responses/InvalidItemTermByLanguageInput"
          },
          "404": {
            "$ref": "#/components/responses/ItemAliasesInLanguageNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/properties/{property_id}/statements": {
      "get": {
        "operationId": "getPropertyStatements",
        "tags": [
          "statements"
        ],
        "summary": "Retrieve Statements from a Property",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/PropertyFilter"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PropertyStatements"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRetrievePropertyStatementsInput"
          },
          "404": {
            "$ref": "#/components/responses/PropertyNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "post": {
        "operationId": "addPropertyStatement",
        "tags": [
          "statements"
        ],
        "summary": "Add a new Statement to a Property",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Statement"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/PropertyStatementCreated"
          },
          "400": {
            "$ref": "#/components/responses/InvalidNewPropertyStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/PropertyNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/entities/properties/{property_id}/statements/{statement_id}": {
      "get": {
        "operationId": "getPropertyStatement",
        "tags": [
          "statements"
        ],
        "summary": "Retrieve a single Statement from a Property",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/PropertyStatementId"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PropertyStatement"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRetrievePropertyStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/PropertyStatementNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "operationId": "replacePropertyStatement",
        "tags": [
          "statements"
        ],
        "summary": "Replace a single Statement of a Property",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/PropertyStatementId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Statement"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PropertyStatement"
          },
          "400": {
            "$ref": "#/components/responses/InvalidReplacePropertyStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/PropertyStatementNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "operationId": "patchPropertyStatement",
        "tags": [
          "statements"
        ],
        "summary": "Change elements of a single Statement of a Property",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/PropertyStatementId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StatementPatch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/PropertyStatement"
          },
          "400": {
            "$ref": "#/components/responses/InvalidPropertyStatementPatch"
          },
          "404": {
            "$ref": "#/components/responses/PropertyStatementNotFound"
          },
          "409": {
            "$ref": "#/components/responses/CannotApplyStatementPatch"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "422": {
            "$ref": "#/components/responses/InvalidPatchedStatement"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "operationId": "deletePropertyStatement",
        "tags": [
          "statements"
        ],
        "summary": "Delete a single Statement from a Property",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/PropertyId"
          },
          {
            "$ref": "#/components/parameters/PropertyStatementId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Edit"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResourceDeleted"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRemovePropertyStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/PropertyStatementNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    },
    "/statements/{statement_id}": {
      "get": {
        "operationId": "getStatement",
        "tags": [
          "statements"
        ],
        "summary": "Retrieve a single Statement",
        "description": "This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/StatementId"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfModifiedSince"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          },
          {
            "$ref": "#/components/parameters/Authorization"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Statement"
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRetrieveStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/StatementNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "put": {
        "operationId": "replaceStatement",
        "tags": [
          "statements"
        ],
        "summary": "Replace a single Statement",
        "description": "This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/StatementId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Statement"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Statement"
          },
          "400": {
            "$ref": "#/components/responses/InvalidReplaceStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/StatementNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "patch": {
        "operationId": "patchStatement",
        "tags": [
          "statements"
        ],
        "summary": "Change elements of a single Statement",
        "description": "This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/StatementId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/StatementPatch"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Statement"
          },
          "400": {
            "$ref": "#/components/responses/InvalidStatementPatch"
          },
          "404": {
            "$ref": "#/components/responses/StatementNotFound"
          },
          "409": {
            "$ref": "#/components/responses/CannotApplyStatementPatch"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "422": {
            "$ref": "#/components/responses/InvalidPatchedStatement"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      },
      "delete": {
        "operationId": "deleteStatement",
        "tags": [
          "statements"
        ],
        "summary": "Delete a single Statement",
        "description": "This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`",
        "parameters": [
          {
            "$ref": "#/components/parameters/StatementId"
          },
          {
            "$ref": "#/components/parameters/IfMatch"
          },
          {
            "$ref": "#/components/parameters/IfNoneMatch"
          },
          {
            "$ref": "#/components/parameters/IfUnmodifiedSince"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Edit"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResourceDeleted"
          },
          "400": {
            "$ref": "#/components/responses/InvalidRemoveStatementInput"
          },
          "404": {
            "$ref": "#/components/responses/StatementNotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailedError"
          },
          "415": {
            "$ref": "#/components/responses/InvalidMediaType"
          },
          "500": {
            "$ref": "#/components/responses/UnexpectedError"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "ItemId": {
        "in": "path",
        "name": "item_id",
        "description": "The ID of the required Item",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^Q[1-9]\\d{0,9}$"
        },
        "examples": {
          "item": {
            "summary": "Example of Item ID",
            "value": "Q42"
          }
        }
      },
      "PropertyId": {
        "in": "path",
        "name": "property_id",
        "description": "The ID of the required Property",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^P[1-9]\\d{0,9}$"
        },
        "examples": {
          "item": {
            "summary": "Example of Property ID",
            "value": "P31"
          }
        }
      },
      "StatementId": {
        "in": "path",
        "name": "statement_id",
        "description": "The ID of the required Statement",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^(Q|P)[1-9]\\d{0,9}\\$.+$"
        },
        "examples": {
          "Statement on an Item": {
            "$ref": "#/components/examples/ItemStatementIdExample"
          },
          "Statement on a Property": {
            "$ref": "#/components/examples/PropertyStatementIdExample"
          }
        }
      },
      "ItemStatementId": {
        "in": "path",
        "name": "statement_id",
        "description": "The ID of the required Item Statement",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^Q[1-9]\\d{0,9}\\$.+$"
        },
        "example": {
          "$ref": "#/components/examples/ItemStatementIdExample/value"
        }
      },
      "PropertyStatementId": {
        "in": "path",
        "name": "statement_id",
        "description": "The ID of the required Property Statement",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^P[1-9]\\d{0,9}\\$.+$"
        },
        "example": {
          "$ref": "#/components/examples/PropertyStatementIdExample/value"
        }
      },
      "LanguageCode": {
        "in": "path",
        "name": "language_code",
        "description": "The requested resource language",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[a-z]{2}[a-z0-9-]*$"
        },
        "example": "en"
      },
      "ItemFields": {
        "in": "query",
        "name": "_fields",
        "description": "Comma-separated list of fields to include in each response object.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "type",
              "labels",
              "descriptions",
              "aliases",
              "statements",
              "sitelinks"
            ]
          }
        },
        "explode": false,
        "style": "form"
      },
      "PropertyFields": {
        "in": "query",
        "name": "_fields",
        "description": "Comma-separated list of fields to include in each response object.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "type",
              "data-type",
              "labels",
              "descriptions",
              "aliases",
              "statements"
            ]
          }
        },
        "explode": false,
        "style": "form"
      },
      "PropertyFilter": {
        "in": "query",
        "name": "property",
        "description": "Single property ID to filter statements by.",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^P[1-9]\\d{0,9}$"
        },
        "style": "form",
        "example": "P31"
      },
      "IfNoneMatch": {
        "name": "If-None-Match",
        "in": "header",
        "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(?:\".+\"|\\*)$"
          }
        },
        "examples": {
          "strong-etag": {
            "summary": "Single ETag",
            "value": [
              "\"1276705620\""
            ]
          },
          "multiple-etags": {
            "summary": "Multiple ETags",
            "value": [
              "\"1276703231\"",
              "\"1276705620\""
            ]
          }
        }
      },
      "IfModifiedSince": {
        "name": "If-Modified-Since",
        "in": "header",
        "description": "Conditionally perform the request only if the resource has been modified after the specified date",
        "schema": {
          "type": "string",
          "format": "http-date"
        },
        "example": "Sat, 06 Jun 2020 16:38:47 GMT"
      },
      "IfMatch": {
        "name": "If-Match",
        "in": "header",
        "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(?:\".+\"|\\*)$"
          }
        },
        "examples": {
          "strong-etag": {
            "summary": "Single ETag",
            "value": [
              "\"1276705620\""
            ]
          },
          "multiple-etags": {
            "summary": "Multiple ETags",
            "value": [
              "\"1276703231\"",
              "\"1276705620\""
            ]
          }
        }
      },
      "IfUnmodifiedSince": {
        "name": "If-Unmodified-Since",
        "in": "header",
        "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
        "schema": {
          "type": "string",
          "format": "http-date"
        },
        "example": "Sat, 06 Jun 2020 16:38:47 GMT"
      },
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "Make authenticated request using a provided bearer token",
        "schema": {
          "type": "string"
        },
        "example": "Bearer mF_9.B5f-4.1JqM"
      }
    },
    "requestBodies": {
      "Label": {
        "description": "Payload containing a Wikibase label in the specified language and edit metadata",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "example": "Douglas Adams"
                    }
                  },
                  "required": [
                    "label"
                  ]
                },
                {
                  "$ref": "#/components/requestBodies/Edit/content/application~1json/schema"
                }
              ]
            }
          }
        }
      },
      "LabelsPatch": {
        "description": "Payload containing a JSON Patch document to be applied to an Item's Labels and edit metadata",
        "required": true,
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/requestBodies/LabelsPatch/content/application~1json/schema"
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/requestBodies/StatementPatch/content/application~1json/schema"
                },
                {
                  "properties": {
                    "patch": {
                      "items": {
                        "properties": {
                          "path": {
                            "example": "/en"
                          },
                          "value": {
                            "example": "patched label"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/requestBodies/Edit/content/application~1json/schema"
                }
              ]
            }
          }
        }
      },
      "Description": {
        "description": "Payload containing a Wikibase description in the specified language and edit metadata",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string",
                      "example": "English science fiction writer and humourist"
                    }
                  },
                  "required": [
                    "description"
                  ]
                },
                {
                  "$ref": "#/components/requestBodies/Edit/content/application~1json/schema"
                }
              ]
            }
          }
        }
      },
      "DescriptionsPatch": {
        "description": "Payload containing a JSON Patch document to be applied to an Item's descriptions and edit metadata",
        "required": true,
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/requestBodies/DescriptionsPatch/content/application~1json/schema"
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/requestBodies/StatementPatch/content/application~1json/schema"
                },
                {
                  "properties": {
                    "patch": {
                      "items": {
                        "properties": {
                          "path": {
                            "example": "/en"
                          },
                          "value": {
                            "example": "patched description"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/requestBodies/Edit/content/application~1json/schema"
                }
              ]
            }
          }
        }
      },
      "Statement": {
        "description": "Payload containing a Wikibase Statement object and edit metadata",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "statement": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Statement"
                        },
                        {
                          "allOf": [
                            {
                              "required": [
                                "property",
                                "value"
                              ],
                              "properties": {
                                "property": {
                                  "required": [
                                    "id"
                                  ]
                                },
                                "value": {
                                  "required": [
                                    "type"
                                  ]
                                }
                              }
                            },
                            {
                              "properties": {
                                "qualifiers": {
                                  "items": {
                                    "$ref": "#/components/schemas/Qualifier"
                                  }
                                },
                                "references": {
                                  "items": {
                                    "required": [
                                      "parts"
                                    ],
                                    "properties": {
                                      "parts": {
                                        "items": {
                                          "$ref": "#/components/schemas/Qualifier"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "statement"
                  ]
                },
                {
                  "$ref": "#/components/requestBodies/Edit/content/application~1json/schema"
                }
              ]
            }
          }
        }
      },
      "StatementPatch": {
        "description": "Payload containing a JSON Patch document to be applied to a Statement and edit metadata",
        "required": true,
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/requestBodies/StatementPatch/content/application~1json/schema"
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ],
                            "example": "replace"
                          },
                          "path": {
                            "description": "A JSON Pointer for the property to manipulate",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "properties": {
                    "patch": {
                      "items": {
                        "properties": {
                          "path": {
                            "example": "/value/content"
                          },
                          "value": {
                            "example": "patched value"
                          }
                        }
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/requestBodies/Edit/content/application~1json/schema"
                }
              ]
            }
          }
        }
      },
      "Edit": {
        "description": "Edit payload containing edit metadata",
        "required": false,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": [],
                  "example": [
                    "mobile edit",
                    "external tool edit"
                  ]
                },
                "bot": {
                  "type": "boolean",
                  "default": false
                },
                "comment": {
                  "type": "string",
                  "example": "API edit fixing the modelling as discussed in ..."
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "ResourceDeleted": {
        "description": "The resource was deleted",
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which response is provided"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "Statement deleted"
          }
        }
      },
      "ItemNotFound": {
        "description": "The specified Item was not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "item-not-found": {
                "$ref": "#/components/examples/ItemNotFoundExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "PropertyNotFound": {
        "description": "The specified property was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "property-not-found": {
                "$ref": "#/components/examples/PropertyNotFoundExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "ItemRedirected": {
        "description": "The specified Item was redirected",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "redirected-item": {
                "$ref": "#/components/examples/RedirectedItemExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "StatementNotFound": {
        "description": "The specified Statement was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "statement-not-found": {
                "$ref": "#/components/examples/StatementNotFoundExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "ItemStatementNotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "item-not-found": {
                "$ref": "#/components/examples/ItemNotFoundExample"
              },
              "statement-not-found": {
                "$ref": "#/components/examples/StatementNotFoundExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "PropertyStatementNotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "property-not-found": {
                "$ref": "#/components/examples/PropertyNotFoundExample"
              },
              "statement-not-found": {
                "$ref": "#/components/examples/StatementNotFoundExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "ItemLabelNotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "item-not-found": {
                "$ref": "#/components/examples/ItemNotFoundExample"
              },
              "label-not-defined": {
                "$ref": "#/components/examples/ItemLabelNotDefinedExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "PropertyLabelNotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "property-not-found": {
                "$ref": "#/components/examples/PropertyNotFoundExample"
              },
              "label-not-defined": {
                "$ref": "#/components/examples/PropertyLabelNotDefinedExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "ItemAliasesInLanguageNotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "item-not-found": {
                "$ref": "#/components/examples/ItemNotFoundExample"
              },
              "aliases-not-defined": {
                "$ref": "#/components/examples/ItemAliasesNotDefinedExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "ItemDescriptionNotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "item-not-found": {
                "$ref": "#/components/examples/ItemNotFoundExample"
              },
              "description-not-defined": {
                "$ref": "#/components/examples/ItemDescriptionNotDefinedExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidItemInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-field": {
                "$ref": "#/components/examples/InvalidFieldExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidPropertyInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-property-id": {
                "$ref": "#/components/examples/InvalidPropertyIdExample"
              },
              "invalid-field": {
                "$ref": "#/components/examples/InvalidFieldExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidItemIdInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidPropertyIdInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-property-id": {
                "$ref": "#/components/examples/InvalidPropertyIdExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidRetrieveItemStatementsInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-property-id": {
                "$ref": "#/components/examples/InvalidPropertyIdExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidRetrievePropertyStatementsInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-property-id": {
                "$ref": "#/components/examples/InvalidPropertyIdExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidRetrieveStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidRetrieveItemStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidRetrievePropertyStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-property-id": {
                "$ref": "#/components/examples/InvalidPropertyIdExample"
              },
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidNewItemStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              },
              "statement-data-missing-field": {
                "$ref": "#/components/examples/StatementDataMissingFieldExample"
              },
              "statement-data-invalid-field": {
                "$ref": "#/components/examples/StatementDataInvalidFieldExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidNewPropertyStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-property-id": {
                "$ref": "#/components/examples/InvalidPropertyIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              },
              "statement-data-missing-field": {
                "$ref": "#/components/examples/StatementDataMissingFieldExample"
              },
              "statement-data-invalid-field": {
                "$ref": "#/components/examples/StatementDataInvalidFieldExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidReplaceStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              },
              "statement-data-missing-field": {
                "$ref": "#/components/examples/StatementDataMissingFieldExample"
              },
              "statement-data-invalid-field": {
                "$ref": "#/components/examples/StatementDataInvalidFieldExample"
              },
              "invalid-operation-change-statement-id": {
                "$ref": "#/components/examples/InvalidOperationChangeStatementId"
              },
              "invalid-operation-change-property-of-statement": {
                "$ref": "#/components/examples/InvalidOperationChangePropertyOfStatement"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidReplaceItemStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              },
              "statement-data-missing-field": {
                "$ref": "#/components/examples/StatementDataMissingFieldExample"
              },
              "statement-data-invalid-field": {
                "$ref": "#/components/examples/StatementDataInvalidFieldExample"
              },
              "invalid-operation-change-statement-id": {
                "$ref": "#/components/examples/InvalidOperationChangeStatementId"
              },
              "invalid-operation-change-property-of-statement": {
                "$ref": "#/components/examples/InvalidOperationChangePropertyOfStatement"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidReplacePropertyStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-property-id": {
                "$ref": "#/components/examples/InvalidPropertyIdExample"
              },
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              },
              "statement-data-missing-field": {
                "$ref": "#/components/examples/StatementDataMissingFieldExample"
              },
              "statement-data-invalid-field": {
                "$ref": "#/components/examples/StatementDataInvalidFieldExample"
              },
              "invalid-operation-change-statement-id": {
                "$ref": "#/components/examples/InvalidOperationChangeStatementId"
              },
              "invalid-operation-change-property-of-statement": {
                "$ref": "#/components/examples/InvalidOperationChangePropertyOfStatement"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidRemoveStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidRemoveItemStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidRemovePropertyStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-property-id": {
                "$ref": "#/components/examples/InvalidPropertyIdExample"
              },
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidSetItemLabelInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-language-code": {
                "$ref": "#/components/examples/InvalidLanguageCodeExample"
              },
              "invalid-label": {
                "$ref": "#/components/examples/InvalidLabelExample"
              },
              "label-empty": {
                "$ref": "#/components/examples/LabelEmptyExample"
              },
              "label-too-long": {
                "$ref": "#/components/examples/LabelTooLongExample"
              },
              "label-description-same-value": {
                "$ref": "#/components/examples/LabelDescriptionSameValueExample"
              },
              "item-label-description-duplicate": {
                "$ref": "#/components/examples/ItemLabelDescriptionDuplicateExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidSetItemDescriptionInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-language-code": {
                "$ref": "#/components/examples/InvalidLanguageCodeExample"
              },
              "invalid-description": {
                "$ref": "#/components/examples/InvalidDescriptionExample"
              },
              "description-empty": {
                "$ref": "#/components/examples/DescriptionEmptyExample"
              },
              "description-too-long": {
                "$ref": "#/components/examples/DescriptionTooLongExample"
              },
              "label-description-same-value": {
                "$ref": "#/components/examples/LabelDescriptionSameValueExample"
              },
              "item-label-description-duplicate": {
                "$ref": "#/components/examples/ItemLabelDescriptionDuplicateExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidItemTermByLanguageInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-language-code": {
                "$ref": "#/components/examples/InvalidLanguageCodeExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidPropertyTermByLanguageInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "examples": {
              "invalid-property-id": {
                "$ref": "#/components/examples/InvalidPropertyIdExample"
              },
              "invalid-language-code": {
                "$ref": "#/components/examples/InvalidLanguageCodeExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidItemPatchRequest": {
        "description": "The provided JSON Patch request is invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              },
              "invalid-patch": {
                "$ref": "#/components/examples/InvalidPatchExample"
              },
              "invalid-patch-operation": {
                "$ref": "#/components/examples/InvalidPatchOperationExample"
              },
              "invalid-patch-field-type": {
                "$ref": "#/components/examples/InvalidPatchFieldTypeExample"
              },
              "missing-json-patch-field": {
                "$ref": "#/components/examples/MissingJsonPatchFieldExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "CannotApplyLabelsDescriptionsPatch": {
        "description": "The provided JSON Patch cannot be applied",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "redirected-item": {
                "$ref": "#/components/examples/RedirectedItemExample"
              },
              "patch-test-failed": {
                "$ref": "#/components/examples/PatchTestFailedExample"
              },
              "patch-target-not-found": {
                "$ref": "#/components/examples/PatchTargetNotFoundExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidPatchedLabels": {
        "description": "Applying the provided JSON Patch results in invalid Labels",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
                },
                {
                  "properties": {
                    "context": {
                      "type": "object"
                    }
                  }
                }
              ]
            },
            "examples": {
              "patched-labels-invalid-language-code": {
                "$ref": "#/components/examples/PatchedLabelsInvalidLanguageCodeExample"
              },
              "patched-label-empty": {
                "$ref": "#/components/examples/PatchedLabelEmptyExample"
              },
              "patched-label-too-long": {
                "$ref": "#/components/examples/PatchedLabelTooLongExample"
              },
              "patched-label-invalid": {
                "$ref": "#/components/examples/PatchedLabelInvalidExample"
              },
              "patched-item-label-description-same-value": {
                "$ref": "#/components/examples/PatchedItemLabelDescriptionSameValueExample"
              },
              "patched-item-label-description-duplicate": {
                "$ref": "#/components/examples/PatchedItemLabelDescriptionDuplicateExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidPatchedDescriptions": {
        "description": "Applying the provided JSON Patch results in invalid descriptions",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "patched-descriptions-invalid-language-code": {
                "$ref": "#/components/examples/PatchedDescriptionsInvalidLanguageCodeExample"
              },
              "patched-description-empty": {
                "$ref": "#/components/examples/PatchedDescriptionEmptyExample"
              },
              "patched-description-too-long": {
                "$ref": "#/components/examples/PatchedDescriptionTooLongExample"
              },
              "patched-description-invalid": {
                "$ref": "#/components/examples/PatchedDescriptionInvalidExample"
              },
              "patched-item-label-description-same-value": {
                "$ref": "#/components/examples/PatchedItemLabelDescriptionSameValueExample"
              },
              "patched-item-label-description-duplicate": {
                "$ref": "#/components/examples/PatchedItemLabelDescriptionDuplicateExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidStatementPatch": {
        "description": "The provided JSON Patch is invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              },
              "invalid-operation-change-statement-id": {
                "$ref": "#/components/examples/InvalidOperationChangeStatementId"
              },
              "invalid-operation-change-property-of-statement": {
                "$ref": "#/components/examples/InvalidOperationChangePropertyOfStatement"
              },
              "invalid-patch": {
                "$ref": "#/components/examples/InvalidPatchExample"
              },
              "invalid-patch-operation": {
                "$ref": "#/components/examples/InvalidPatchOperationExample"
              },
              "invalid-patch-field-type": {
                "$ref": "#/components/examples/InvalidPatchFieldTypeExample"
              },
              "missing-json-patch-field": {
                "$ref": "#/components/examples/MissingJsonPatchFieldExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidItemStatementPatch": {
        "description": "The provided JSON Patch is invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-item-id": {
                "$ref": "#/components/examples/InvalidItemIdExample"
              },
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              },
              "invalid-operation-change-statement-id": {
                "$ref": "#/components/examples/InvalidOperationChangeStatementId"
              },
              "invalid-operation-change-property-of-statement": {
                "$ref": "#/components/examples/InvalidOperationChangePropertyOfStatement"
              },
              "invalid-patch": {
                "$ref": "#/components/examples/InvalidPatchExample"
              },
              "invalid-patch-operation": {
                "$ref": "#/components/examples/InvalidPatchOperationExample"
              },
              "invalid-patch-field-type": {
                "$ref": "#/components/examples/InvalidPatchFieldTypeExample"
              },
              "missing-json-patch-field": {
                "$ref": "#/components/examples/MissingJsonPatchFieldExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidPropertyStatementPatch": {
        "description": "The provided JSON Patch is invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "invalid-property-id": {
                "$ref": "#/components/examples/InvalidPropertyIdExample"
              },
              "invalid-statement-id": {
                "$ref": "#/components/examples/InvalidStatementIdExample"
              },
              "invalid-edit-tag": {
                "$ref": "#/components/examples/InvalidEditTagExample"
              },
              "comment-too-long": {
                "$ref": "#/components/examples/CommentTooLongExample"
              },
              "invalid-operation-change-statement-id": {
                "$ref": "#/components/examples/InvalidOperationChangeStatementId"
              },
              "invalid-operation-change-property-of-statement": {
                "$ref": "#/components/examples/InvalidOperationChangePropertyOfStatement"
              },
              "invalid-patch": {
                "$ref": "#/components/examples/InvalidPatchExample"
              },
              "invalid-patch-operation": {
                "$ref": "#/components/examples/InvalidPatchOperationExample"
              },
              "invalid-patch-field-type": {
                "$ref": "#/components/examples/InvalidPatchFieldTypeExample"
              },
              "missing-json-patch-field": {
                "$ref": "#/components/examples/MissingJsonPatchFieldExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "CannotApplyStatementPatch": {
        "description": "The provided JSON Patch cannot be applied",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "patch-test-failed": {
                "$ref": "#/components/examples/PatchTestFailedExample"
              },
              "patch-target-not-found": {
                "$ref": "#/components/examples/PatchTargetNotFoundExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "InvalidPatchedStatement": {
        "description": "Applying the provided JSON Patch results in an invalid statement",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/InvalidPatchedLabels/content/application~1json/schema"
            },
            "examples": {
              "patched-statement-missing-field": {
                "$ref": "#/components/examples/PatchedStatementMissingFieldExample"
              },
              "patched-statement-invalid-field": {
                "$ref": "#/components/examples/PatchedStatementInvalidFieldExample"
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "PreconditionFailedError": {
        "description": "The condition defined by a conditional request header is not fulfilled"
      },
      "InvalidMediaType": {
        "description": "The media type specified by the `Content-Type` header is not allowed on this endpoint",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "example": {
              "code": "unsupported-content-type",
              "message": "Unsupported Content-Type: 'application/x-www-form-urlencoded'",
              "httpCode": 415,
              "httpReason": "Unsupported Media Type"
            }
          }
        }
      },
      "UnexpectedError": {
        "description": "An unexpected error has occurred",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/ItemNotFound/content/application~1json/schema"
            },
            "example": {
              "code": "unexpected-error",
              "message": "Unexpected Error"
            }
          }
        },
        "headers": {
          "Content-Language": {
            "schema": {
              "type": "string"
            },
            "description": "Language code of the language in which error message is provided"
          }
        }
      },
      "Item": {
        "description": "A single Wikibase Item",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Item"
                },
                {
                  "required": [
                    "id",
                    "type",
                    "labels",
                    "descriptions",
                    "aliases",
                    "statements",
                    "sitelinks"
                  ],
                  "properties": {
                    "sitelinks": {
                      "additionalProperties": {
                        "required": [
                          "title",
                          "badges",
                          "url"
                        ]
                      }
                    },
                    "statements": {
                      "additionalProperties": {
                        "items": {
                          "$ref": "#/components/schemas/Statement"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "ItemLabels": {
        "description": "Item's labels by language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Labels"
            }
          }
        }
      },
      "ItemLabel": {
        "description": "Item's label in a specific language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string",
              "example": "Douglas Adams"
            }
          }
        }
      },
      "ItemDescriptions": {
        "description": "Item's descriptions by language",
        "headers": {
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Descriptions"
            }
          }
        }
      },
      "ItemDescription": {
        "description": "Item's description in a specific language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string",
              "example": "English science fiction writer and humourist"
            }
          }
        }
      },
      "ItemAliases": {
        "description": "Item's aliases by language",
        "headers": {
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Aliases"
            }
          }
        }
      },
      "ItemAliasesInLanguage": {
        "description": "Item's aliases in a specific language",
        "headers": {
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "example": [
                "Douglas Noel Adams",
                "Douglas Noël Adams"
              ]
            }
          }
        }
      },
      "Property": {
        "description": "A single Wikibase Property",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Property"
                },
                {
                  "required": [
                    "id",
                    "type",
                    "data-type",
                    "labels",
                    "descriptions",
                    "aliases",
                    "statements"
                  ],
                  "properties": {
                    "statements": {
                      "additionalProperties": {
                        "items": {
                          "$ref": "#/components/schemas/Statement"
                        }
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "PropertyLabels": {
        "description": "Property's labels by language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Labels"
            }
          }
        }
      },
      "PropertyLabel": {
        "description": "Property's label in a specific language",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string",
              "example": "instance of"
            }
          }
        }
      },
      "PropertyDescriptions": {
        "description": "Property's descriptions by language",
        "headers": {
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Descriptions"
            }
          }
        }
      },
      "PropertyAliases": {
        "description": "Property's aliases by language",
        "headers": {
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Aliases"
            }
          }
        }
      },
      "Statement": {
        "description": "A single Wikibase Statement. Please note that the value of the `ETag` header field refers to the entity's revision ID.",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Statement"
                },
                {
                  "allOf": [
                    {
                      "required": [
                        "property",
                        "value"
                      ],
                      "properties": {
                        "property": {
                          "required": [
                            "id",
                            "data-type"
                          ]
                        },
                        "value": {
                          "required": [
                            "type"
                          ]
                        }
                      }
                    },
                    {
                      "required": [
                        "id",
                        "rank",
                        "qualifiers",
                        "references"
                      ],
                      "properties": {
                        "qualifiers": {
                          "items": {
                            "$ref": "#/components/schemas/Qualifier"
                          }
                        },
                        "references": {
                          "items": {
                            "required": [
                              "hash",
                              "parts"
                            ],
                            "properties": {
                              "parts": {
                                "items": {
                                  "$ref": "#/components/schemas/Reference"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "examples": {
              "Statement on an Item": {
                "$ref": "#/components/examples/ItemStatementResponseExample"
              },
              "Statement on a Property": {
                "$ref": "#/components/examples/PropertyStatementResponseExample"
              }
            }
          }
        }
      },
      "ItemStatement": {
        "description": "A single Wikibase Statement. Please note that the value of the `ETag` header field refers to the Item's revision ID.",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/Statement/content/application~1json/schema"
            },
            "example": {
              "$ref": "#/components/examples/ItemStatementResponseExample/value"
            }
          }
        }
      },
      "PropertyStatement": {
        "description": "A single Wikibase Statement. Please note that the value of the `ETag` header field refers to the Property's Revision ID.",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/Statement/content/application~1json/schema"
            },
            "example": {
              "$ref": "#/components/examples/PropertyStatementResponseExample/value"
            }
          }
        }
      },
      "ItemStatementCreated": {
        "description": "A single newly created Wikibase Statement. Please note that the value of the `ETag` header field refers to the entity's revision ID.",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          },
          "Location": {
            "schema": {
              "type": "string"
            },
            "description": "The URI of the newly created statement"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/Statement/content/application~1json/schema"
            }
          }
        }
      },
      "PropertyStatementCreated": {
        "description": "A single newly created Wikibase Statement. Please note that the value of the `ETag` header field refers to the entity's revision ID.",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          },
          "Location": {
            "schema": {
              "type": "string"
            },
            "description": "The URI of the newly created statement"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/responses/Statement/content/application~1json/schema"
            },
            "example": {
              "$ref": "#/components/examples/PropertyStatementResponseExample/value"
            }
          }
        }
      },
      "ItemStatements": {
        "description": "The statements of an Item",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/responses/Statement/content/application~1json/schema"
                }
              }
            },
            "example": {
              "P370": [
                {
                  "id": "Q11$6403c562-401a-2b26-85cc-8327801145e1",
                  "rank": "normal",
                  "property": {
                    "id": "P370",
                    "data-type": "string"
                  },
                  "value": {
                    "content": "I am a goat",
                    "type": "value"
                  },
                  "qualifiers": [],
                  "references": []
                }
              ],
              "P92": [
                {
                  "id": "Q11$6403c562-401a-2b26-85cc-8327801145e1",
                  "rank": "normal",
                  "property": {
                    "id": "P92",
                    "data-type": "string"
                  },
                  "value": {
                    "content": "I am a goat",
                    "type": "value"
                  },
                  "qualifiers": [],
                  "references": []
                }
              ]
            }
          }
        }
      },
      "PropertyStatements": {
        "description": "The statements of a Property",
        "headers": {
          "Last-Modified": {
            "schema": {
              "type": "string"
            },
            "description": "Last modified date"
          },
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          },
          "X-Authenticated-User": {
            "schema": {
              "type": "string"
            },
            "description": "Optional username of the user making the request"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/responses/Statement/content/application~1json/schema"
                }
              }
            },
            "example": {
              "P370": [
                {
                  "id": "P11$6403c562-401a-2b26-85cc-8327801145e1",
                  "rank": "normal",
                  "property": {
                    "id": "P370",
                    "data-type": "string"
                  },
                  "value": {
                    "content": "I am a goat",
                    "type": "value"
                  },
                  "qualifiers": [],
                  "references": []
                }
              ],
              "P92": [
                {
                  "id": "P11$6403c562-401a-2b26-85cc-8327801145e1",
                  "rank": "normal",
                  "property": {
                    "id": "P92",
                    "data-type": "string"
                  },
                  "value": {
                    "content": "I am a goat",
                    "type": "value"
                  },
                  "qualifiers": [],
                  "references": []
                }
              ]
            }
          }
        }
      },
      "NotModified": {
        "description": "The specified resource has not been modified since last provided revision number or date",
        "headers": {
          "ETag": {
            "schema": {
              "type": "string"
            },
            "description": "Last entity revision number"
          }
        }
      },
      "Moved": {
        "description": "The specified resource has permanently moved to the indicated location",
        "headers": {
          "Location": {
            "schema": {
              "type": "string"
            },
            "description": "The URL to which the requested resource has been moved"
          }
        }
      }
    },
    "schemas": {
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "Q42"
          },
          "type": {
            "type": "string",
            "example": "item"
          },
          "labels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Labels"
              },
              {
                "example": {
                  "en": "Douglas Adams",
                  "fr": "Douglas Adams"
                }
              }
            ]
          },
          "descriptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Descriptions"
              },
              {
                "example": {
                  "en": "English science fiction writer and humourist",
                  "fr": "écrivain de science-fiction et humoriste anglais"
                }
              }
            ]
          },
          "aliases": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Aliases"
              },
              {
                "example": {
                  "en": [
                    "Douglas Noel Adams",
                    "Douglas Noël Adams"
                  ],
                  "fr": [
                    "Douglas Noel Adams"
                  ]
                }
              }
            ]
          },
          "sitelinks": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Sitelink"
            },
            "example": {
              "afwiki": {
                "title": "Douglas Adams",
                "badges": [
                  "Q17437798"
                ],
                "url": "https://af.wikipedia.org/wiki/Douglas_Adams"
              },
              "arwiki": {
                "title": "دوغلاس آدمز",
                "badges": [],
                "url": "https://ar.wikipedia.org/wiki/%D8%AF%D9%88%D8%BA%D9%84%D8%A7%D8%B3_%D8%A2%D8%AF%D9%85%D8%B2"
              }
            }
          },
          "statements": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Statement"
              }
            }
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Property": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "P31"
          },
          "type": {
            "type": "string",
            "example": "property"
          },
          "data-type": {
            "type": "string",
            "example": "wikibase-item"
          },
          "labels": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Labels"
              },
              {
                "example": {
                  "en": "Instance of",
                  "fr": "nature de l'élément"
                }
              }
            ]
          },
          "descriptions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Descriptions"
              },
              {
                "example": {
                  "en": "that class of which this subject is a particular example and member; different from P279 (subclass of); for example: K2 is an instance of mountain; volcano is a subclass of mountain (and an instance of volcanic landform)",
                  "fr": "cet élément est un exemple spécifique de cette classe qui en précise la nature. Ne pas confondre avec la propriété P279 (sous-classe de)"
                }
              }
            ]
          },
          "aliases": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Aliases"
              },
              {
                "example": {
                  "en": [
                    "is a",
                    "is an"
                  ],
                  "fr": [
                    "est un"
                  ]
                }
              }
            ]
          },
          "statements": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Statement"
                  },
                  {
                    "properties": {
                      "id": {
                        "example": "P31$6403c562-401a-2b26-85cc-8327801145e1"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Labels": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "en": "en-label",
          "fr": "fr-label"
        }
      },
      "Descriptions": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "en": "en-description",
          "fr": "fr-description"
        }
      },
      "Aliases": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "example": {
          "en": [
            "en-alias1",
            "en-alias2"
          ],
          "fr": [
            "fr-alias1",
            "fr-alias2"
          ]
        }
      },
      "Sitelink": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "badges": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "Statement": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "The globally unique identifier for this Statement",
                "type": "string",
                "readOnly": true,
                "example": "Q11$6403c562-401a-2b26-85cc-8327801145e1"
              },
              "rank": {
                "description": "The rank of the Statement",
                "type": "string",
                "enum": [
                  "deprecated",
                  "normal",
                  "preferred"
                ],
                "default": "normal"
              }
            }
          },
          {
            "$ref": "#/components/schemas/Qualifier"
          },
          {
            "type": "object",
            "properties": {
              "qualifiers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Qualifier"
                },
                "default": []
              },
              "references": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Reference"
                },
                "default": []
              }
            }
          }
        ]
      },
      "Qualifier": {
        "type": "object",
        "properties": {
          "property": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the Property",
                "type": "string",
                "example": "P92"
              },
              "data-type": {
                "description": "The data type of the Property",
                "type": "string",
                "readOnly": true,
                "nullable": true,
                "example": "string"
              }
            }
          },
          "value": {
            "type": "object",
            "properties": {
              "content": {
                "description": "The value, if type == \"value\", otherwise omitted",
                "example": "I am a goat"
              },
              "type": {
                "description": "The value type",
                "type": "string",
                "enum": [
                  "value",
                  "somevalue",
                  "novalue"
                ]
              }
            }
          }
        }
      },
      "Reference": {
        "type": "object",
        "properties": {
          "hash": {
            "description": "Hash of the Reference",
            "type": "string",
            "readOnly": true,
            "example": "455481eeac76e6a8af71a6b493c073d54788e7e9"
          },
          "parts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Qualifier"
            }
          }
        }
      }
    },
    "examples": {
      "InvalidEditTagExample": {
        "value": {
          "code": "invalid-edit-tag",
          "message": "Invalid MediaWiki tag: {tag}"
        }
      },
      "CommentTooLongExample": {
        "value": {
          "code": "comment-too-long",
          "message": "Comment must not be longer than 500 characters"
        }
      },
      "InvalidFieldExample": {
        "value": {
          "code": "invalid-field",
          "message": "Not a valid field: {field}"
        }
      },
      "InvalidItemIdExample": {
        "value": {
          "code": "invalid-item-id",
          "message": "Not a valid item ID: {item_id}"
        }
      },
      "InvalidPropertyIdExample": {
        "value": {
          "code": "invalid-property-id",
          "message": "Not a valid property ID: {property_id}",
          "context": {
            "property-id": "{property_id}"
          }
        }
      },
      "InvalidStatementIdExample": {
        "value": {
          "code": "invalid-statement-id",
          "message": "Not a valid statement ID: {statement_id}"
        }
      },
      "InvalidLanguageCodeExample": {
        "value": {
          "code": "invalid-language-code",
          "message": "Not a valid language code: {language_code}"
        }
      },
      "StatementDataMissingFieldExample": {
        "value": {
          "code": "statement-data-missing-field",
          "message": "Mandatory field missing in the statement data: {field}",
          "context": {
            "path": "{field}"
          }
        }
      },
      "StatementDataInvalidFieldExample": {
        "value": {
          "code": "statement-data-invalid-field",
          "message": "Invalid input for '{field}'",
          "context": {
            "path": "{field}",
            "value": "{value}"
          }
        }
      },
      "InvalidOperationChangeStatementId": {
        "value": {
          "code": "invalid-operation-change-statement-id",
          "message": "Cannot change the ID of the existing statement"
        }
      },
      "InvalidOperationChangePropertyOfStatement": {
        "value": {
          "code": "invalid-operation-change-property-of-statement",
          "message": "Cannot change the property of the existing statement"
        }
      },
      "InvalidPatchExample": {
        "value": {
          "code": "invalid-patch",
          "message": "The provided patch is invalid"
        }
      },
      "InvalidPatchOperationExample": {
        "value": {
          "code": "invalid-patch-operation",
          "message": "Incorrect JSON patch operation: '{op}'",
          "context": {
            "operation": {
              "op": "{op}",
              "path": "/some/path"
            }
          }
        }
      },
      "InvalidPatchFieldTypeExample": {
        "value": {
          "code": "invalid-patch-field-type",
          "message": "The value of '{field}' must be of type string",
          "context": {
            "operation": {
              "op": "remove",
              "path": [
                "not",
                "a",
                "string"
              ]
            },
            "field": "path"
          }
        }
      },
      "MissingJsonPatchFieldExample": {
        "value": {
          "code": "missing-json-patch-field",
          "message": "Missing '{field}' in JSON patch",
          "context": {
            "operation": {
              "op": "remove"
            },
            "field": "path"
          }
        }
      },
      "PatchTestFailedExample": {
        "value": {
          "code": "patch-test-failed",
          "message": "Test operation in the provided patch failed. At path '{path}' expected '{expected}', actual: '{actual}'",
          "context": {
            "operation": {
              "op": "test",
              "path": "/some/path",
              "value": "expected value"
            },
            "actual-value": "actual value"
          }
        }
      },
      "PatchTargetNotFoundExample": {
        "value": {
          "code": "patch-target-not-found",
          "message": "Target '{target}' not found on the resource",
          "context": {
            "operation": {
              "op": "replace",
              "path": "/some/path",
              "value": "some value"
            },
            "field": "path"
          }
        }
      },
      "PatchedStatementMissingFieldExample": {
        "value": {
          "code": "patched-statement-missing-field",
          "message": "Mandatory field missing in the patched statement: {field}",
          "context": {
            "path": "{field}"
          }
        }
      },
      "PatchedStatementInvalidFieldExample": {
        "value": {
          "code": "patched-statement-invalid-field",
          "message": "Invalid input for '{field}' in the patched statement",
          "context": {
            "path": "{field}",
            "value": "{value}"
          }
        }
      },
      "ItemNotFoundExample": {
        "value": {
          "code": "item-not-found",
          "message": "Could not find an item with the ID: {item_id}"
        }
      },
      "PropertyNotFoundExample": {
        "value": {
          "code": "property-not-found",
          "message": "Could not find a property with the ID: {property_id}"
        }
      },
      "RedirectedItemExample": {
        "value": {
          "code": "redirected-item",
          "message": "Item {item_id} has been merged into {other_id}"
        }
      },
      "StatementNotFoundExample": {
        "value": {
          "code": "statement-not-found",
          "message": "Could not find a statement with the ID: {statement_id}"
        }
      },
      "ItemLabelNotDefinedExample": {
        "value": {
          "code": "label-not-defined",
          "message": "Item with the ID {item_id} does not have a label in the language: {language_code}"
        }
      },
      "PropertyLabelNotDefinedExample": {
        "value": {
          "code": "label-not-defined",
          "message": "Property with the ID {property_id} does not have a label in the language: {language_code}"
        }
      },
      "ItemDescriptionNotDefinedExample": {
        "value": {
          "code": "description-not-defined",
          "message": "Item with the ID {item_id} does not have a description in the language: {language_code}"
        }
      },
      "ItemAliasesNotDefinedExample": {
        "value": {
          "code": "aliases-not-defined",
          "message": "Item with the ID {item_id} does not have aliases in the language: {language_code}"
        }
      },
      "InvalidLabelExample": {
        "value": {
          "code": "invalid-label",
          "message": "Not a valid label: {label}"
        }
      },
      "LabelEmptyExample": {
        "value": {
          "code": "label-empty",
          "message": "Label must not be empty"
        }
      },
      "LabelTooLongExample": {
        "value": {
          "code": "label-too-long",
          "message": "Label must be no more than {limit} characters long",
          "context": {
            "value": "{label}",
            "character-limit": "{limit}"
          }
        }
      },
      "PatchedLabelsInvalidLanguageCodeExample": {
        "value": {
          "code": "patched-labels-invalid-language-code",
          "message": "Not a valid language code '{language_code}' in changed labels",
          "context": {
            "language": "<language_code>"
          }
        }
      },
      "PatchedLabelEmptyExample": {
        "value": {
          "code": "patched-label-empty",
          "message": "Changed label for '{language_code}' cannot be empty",
          "context": {
            "language": "<language_code>"
          }
        }
      },
      "PatchedLabelTooLongExample": {
        "value": {
          "code": "patched-label-too-long",
          "message": "Changed label for '{language_code}' must not be more than '{limit}' characters long",
          "context": {
            "language": "<language_code>",
            "value": "<label>",
            "limit": 250
          }
        }
      },
      "PatchedLabelInvalidExample": {
        "value": {
          "code": "patched-label-invalid",
          "message": "Changed label for '{language_code}' is invalid: '{label}'",
          "context": {
            "language": "<language_code>",
            "value": "<label>"
          }
        }
      },
      "PatchedDescriptionsInvalidLanguageCodeExample": {
        "value": {
          "code": "patched-descriptions-invalid-language-code",
          "message": "Not a valid language code '{language_code}' in changed descriptions",
          "context": {
            "language": "<language_code>"
          }
        }
      },
      "PatchedDescriptionEmptyExample": {
        "value": {
          "code": "patched-description-empty",
          "message": "Changed description for '{language_code}' cannot be empty",
          "context": {
            "language": "<language_code>"
          }
        }
      },
      "PatchedDescriptionTooLongExample": {
        "value": {
          "code": "patched-description-too-long",
          "message": "Changed description for '{language_code}' must not be more than '{limit}' characters long",
          "context": {
            "language": "<language_code>",
            "value": "<description>",
            "limit": 250
          }
        }
      },
      "PatchedDescriptionInvalidExample": {
        "value": {
          "code": "patched-description-invalid",
          "message": "Changed description for '{language_code}' is invalid: '{label}'",
          "context": {
            "language": "<language_code>",
            "value": "<description>"
          }
        }
      },
      "PatchedItemLabelDescriptionSameValueExample": {
        "value": {
          "code": "patched-item-label-description-same-value",
          "message": "Label and description for language code '{language}' can not have the same value",
          "context": {
            "language": "<language_code>"
          }
        }
      },
      "PatchedItemLabelDescriptionDuplicateExample": {
        "value": {
          "code": "patched-item-label-description-duplicate",
          "message": "Item '{duplicate_id}' already has label '{label}' associated with language code '{language}', using the same description text",
          "context": {
            "language": "<language_code>",
            "label": "<label>",
            "description": "<description>",
            "matching-item-id": "<duplicate_id>"
          }
        }
      },
      "InvalidDescriptionExample": {
        "value": {
          "code": "invalid-description",
          "message": "Not a valid description: {description}"
        }
      },
      "DescriptionEmptyExample": {
        "value": {
          "code": "description-empty",
          "message": "Description must not be empty"
        }
      },
      "DescriptionTooLongExample": {
        "value": {
          "code": "description-too-long",
          "message": "Description must be no more than {limit} characters long",
          "context": {
            "value": "{description}",
            "character-limit": "{limit}"
          }
        }
      },
      "LabelDescriptionSameValueExample": {
        "value": {
          "code": "label-description-same-value",
          "message": "Label and description for language code '{language}' can not have the same value",
          "context": {
            "language": "{language}"
          }
        }
      },
      "ItemLabelDescriptionDuplicateExample": {
        "value": {
          "code": "item-label-description-duplicate",
          "message": "Item '{duplicate_item_id}' already has label '{label}' associated with language code '{language}', using the same description text",
          "context": {
            "language": "{language}",
            "label": "{label}",
            "description": "{description}",
            "matching-item-id": "{duplicate_item_id}"
          }
        }
      },
      "ItemStatementIdExample": {
        "value": "Q42$F078E5B3-F9A8-480E-B7AC-D97778CBBEF9"
      },
      "PropertyStatementIdExample": {
        "value": "P31$9d042001-4a7e-2432-a7e1-233360062379"
      },
      "ItemStatementResponseExample": {
        "value": {
          "id": "Q42$F078E5B3-F9A8-480E-B7AC-D97778CBBEF9",
          "rank": "normal",
          "property": {
            "id": "P31",
            "data-type": "wikibase-item"
          },
          "value": {
            "type": "value",
            "content": "Q5"
          },
          "qualifiers": [],
          "references": []
        }
      },
      "PropertyStatementResponseExample": {
        "value": {
          "id": "P31$9d042001-4a7e-2432-a7e1-233360062379",
          "rank": "normal",
          "property": {
            "id": "P31",
            "data-type": "wikibase-item"
          },
          "value": {
            "type": "value",
            "content": "Q18616576"
          },
          "qualifiers": [],
          "references": []
        }
      }
    }
  },
  "tags": [
    {
      "name": "items",
      "description": "Wikibase Items",
      "externalDocs": {
        "description": "Wikibase Data Model - Items",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Items"
      }
    },
    {
      "name": "properties",
      "description": "Wikibase Properties",
      "externalDocs": {
        "description": "Wikibase Data Model - Properties",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Properties"
      }
    },
    {
      "name": "labels",
      "description": "Wikibase Labels",
      "externalDocs": {
        "description": "Wikibase Data Model - Terms",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#EntityDescriptions_of_Items_and_Properties"
      }
    },
    {
      "name": "descriptions",
      "description": "Wikibase Descriptions",
      "externalDocs": {
        "description": "Wikibase Data Model - Terms",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#EntityDescriptions_of_Items_and_Properties"
      }
    },
    {
      "name": "aliases",
      "description": "Wikibase Aliases",
      "externalDocs": {
        "description": "Wikibase Data Model - Terms",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#EntityDescriptions_of_Items_and_Properties"
      }
    },
    {
      "name": "statements",
      "description": "Wikibase Statements",
      "externalDocs": {
        "description": "Wikibase Data Model - Statements",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Statements"
      }
    }
  ],
  "servers": [
    {
      "url": "https://www.wikidata.org/w/rest.php/wikibase/v0"
    }
  ]
}
